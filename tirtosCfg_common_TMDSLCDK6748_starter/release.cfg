var BIOS                        = xdc.useModule('ti.sysbios.BIOS');
var core                        = xdc.useModule('ti.sysbios.hal.Core');
var Semaphore                   = xdc.useModule('ti.sysbios.knl.Semaphore');
var Swi                         = xdc.useModule('ti.sysbios.knl.Swi');
var Clock                       = xdc.useModule('ti.sysbios.knl.Clock');
var Memory                      = xdc.useModule('xdc.runtime.Memory')
var HeapMem                     = xdc.useModule('ti.sysbios.heaps.HeapMem');
var HeapBuf                     = xdc.useModule('ti.sysbios.heaps.HeapBuf');

var Main                        = xdc.useModule('xdc.runtime.Main');
var TimeStamp                   = xdc.useModule('xdc.runtime.Timestamp');
var Text                        = xdc.useModule('xdc.runtime.Text');
var Log                         = xdc.useModule('xdc.runtime.Log');
var Defaults                    = xdc.useModule('xdc.runtime.Defaults');
var Diags                       = xdc.useModule('xdc.runtime.Diags');
var Error                       = xdc.useModule('xdc.runtime.Error');

var Hwi                         = xdc.useModule('ti.sysbios.family.c64p.Hwi');
var Timer                       = xdc.useModule('ti.sysbios.timers.timer64.Timer');
var EventCombiner               = xdc.useModule('ti.sysbios.family.c64p.EventCombiner');
var Cache                       = xdc.useModule('ti.sysbios.family.c64p.Cache');
var ti_sysbios_hal_Timer        = xdc.useModule('ti.sysbios.hal.Timer');


// ============================================================================
BIOS.taskEnabled                = true;                                         // Enable BIOS Task Scheduler
BIOS.heapSize                   = 0x1000;
BIOS.libType                    = BIOS.LibType_Custom;                          // Build a custom SYS/BIOS library from sources
BIOS.assertsEnabled             = true;
BIOS.logsEnabled                = true;
Program.stack                   = 0x2000;                                       // System stack size (used by ISRs and Swis)
var System                      = xdc.useModule('xdc.runtime.System');
var SysMin                      = xdc.useModule('xdc.runtime.SysMin');
SysMin.bufSize                  = 0x200;                                        // Circular buffer size for System_printf()
System.SupportProxy             = SysMin;
System.maxAtexitHandlers        = 4;


// ================ Create Logger for Whole System ============================
//var LoggerBuf                 = xdc.useModule('xdc.runtime.LoggerBuf');
//var loggerBufParams           = new LoggerBuf.Params();
//loggerBufParams.numEntries    = 4;
//var logger0                   = LoggerBuf.create(loggerBufParams);
//Defaults.common$.logger       = logger0;
//Main.common$.diags_INFO       = Diags.ALWAYS_ON;


// ================ LoggingSetup configuration ================================
//var LoggingSetup                = xdc.useModule('ti.uia.sysbios.LoggingSetup');
//LoggingSetup.loadLoggerSize     = 512;
//LoggingSetup.sysbiosLoggerSize  = 512;
//LoggingSetup.mainLoggerSize     = 1024;
//LoggingSetup.loggerType         = LoggingSetup.LoggerType_STOPMODE;
//LoggingSetup.loadTaskLogging    = true;
//LoggingSetup.loadSwiLogging     = true;
//LoggingSetup.loadHwiLogging     = false;
//LoggingSetup.sysbiosSemaphoreLogging = true;
//LoggingSetup.countingAndGraphingLogging = true;


// ================ Task configuration ========================================
var Task                        = xdc.useModule('ti.sysbios.knl.Task');
Task.checkStackFlag             = false;                                        // No runtime stack checking is performed
Task.numPriorities              = 4;                                            // Reduce the number of task priorities

// ================ Event configuration =======================================
var Event                       = xdc.useModule('ti.sysbios.knl.Event');

// ================ Mailbox configuration =====================================
var Mailbox                     = xdc.useModule('ti.sysbios.knl.Mailbox');

// ================ Idle configuration ========================================
var Idle                        = xdc.useModule('ti.sysbios.knl.Idle');


// ================ POSIX configuration =======================================
var Settings = xdc.useModule('ti.posix.tirtos.Settings');

// ================ SOC and Core specific configuration ================
var devType                     = "omapl138"


// ================ Low level drivers configuration ================
// Load the OSAL package
var osType                      = "tirtos"
var Osal                        = xdc.useModule('ti.osal.Settings');
Osal.osType                     = osType;
Osal.socType                    = devType;

// Load and use the CSL packages
var Csl                         = xdc.useModule('ti.csl.Settings');
Csl.deviceType                  = devType;

// Load the Board package and set the board name
var Board                       = xdc.loadPackage('ti.board');
Board.Settings.boardName        = "lcdkOMAPL138";

// Load the gpio package
var Gpio                        = xdc.loadPackage('ti.drv.gpio');
Gpio.Settings.enableProfiling   = false;
Gpio.Settings.socType           = devType;

// Load the uart package
var Uart                        = xdc.useModule('ti.drv.uart.Settings');
Uart.socType                    = devType;

// Load the I2C package  - required by board
var I2c                         = xdc.loadPackage('ti.drv.i2c');
I2c.Settings.socType            = devType;

// Load the SPI package
var Spi                         = xdc.loadPackage('ti.drv.spi');
Spi.Settings.socType            = devType;


/*
 * Enable Event Groups here and registering of ISR for specific GEM INTC is done
 * using EventCombiner_dispatchPlug() and Hwi_eventMap() APIs
 */
var exception                   = xdc.useModule('ti.sysbios.family.c64p.Exception');
exception.enablePrint           = true;


